name: wipac ci/cd

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'


env:
  CI_DOCKER_IMAGE_W_TAG: wms/test:local
  MONGODB_HOST: localhost
  MONGODB_PORT: 27017
  REST_HOST: localhost  # the server should connect to 0.0.0.0
  REST_PORT: 8080
  MQS_ADDRESS: http://localhost:8081
  #
  REST_OPENAPI_SPEC_FPATH: "schema/rest/openapi_compiled.json"
  DB_JSONSCHEMA_DIR: "schema/db"
  #
  WORKFLOW_MQ_ACTIVATOR_DELAY: 2  # need to define for pytests
  WORKFLOW_MQ_ACTIVATOR_MQS_RETRY_WAIT: 10  # ''
  TASKFORCE_LAUNCH_CONTROL_DELAY: 2  # ''



jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.5


  #############################################################################
  # LINTERS
  #############################################################################


  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version:
            ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.2

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  #############################################################################
  # PACKAGING
  #############################################################################


  writable-branch-detect:
    runs-on: ubuntu-latest
    outputs:
      OKAY: ${{ steps.detect.outputs.OKAY }}
    steps:
      - name: is this a bot-writable branch?
        id: detect
        # dependabot can't access normal secrets
        #   & don't run non-branch triggers (like tags)
        run: |
          set -euo pipefail
          if [[ \
              ${{github.actor}} != 'dependabot[bot]' && \
              ${{github.ref_type}} == 'branch' \
          ]]; then
            echo "OKAY=true" >> "$GITHUB_OUTPUT"
            echo "yes, this branch is compatible"
          else
            echo "OKAY=false" >> "$GITHUB_OUTPUT"
            echo "no, this branch is incompatible"
          fi

  py-setup:
    needs: [ writable-branch-detect ]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-setup-action@v3.1
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Management Service"

  py-dependencies:
    needs: [ writable-branch-detect ]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: docker/setup-buildx-action@v2
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: wms:py-dep-this
          load: true
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v2.1


  #############################################################################
  # FORMATTER
  #############################################################################


  code-format:
    runs-on: ubuntu-latest
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - if: github.actor != 'dependabot[bot]'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # check git status
          git fetch
          if [[ $(git status -sb | grep behind) ]]; then
            echo "this commit is not the most recent on this branch -- rest of action will be skipped"
            exit 0
          fi
          
          # use literal collection syntax, see https://docs.astral.sh/ruff/rules/unnecessary-collection-call/
          pip install ruff
          ruff check --select C408 --fix . --unsafe-fixes
          
          # push
          git add . || true
          git commit -m "<bot> auto code format file(s)" || true
          git push || true


  ############################################################################
  # AUTO-GENERATION
  #############################################################################

  schema-modifications:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: WIPACrepo/wipac-dev-rest-interface-schema-action@v1.1
        with:
          rest_openapi_paths_dir: "schema-precompiled/paths"
          rest_openapi_prebuild_fpath: "schema-precompiled/openapi_prebuild.json"
          rest_openapi_spec_fpath: "wms/${{ env.REST_OPENAPI_SPEC_FPATH }}"
          db_jsonschema_dir: "wms/${{ env.DB_JSONSCHEMA_DIR }}"

  api-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - uses: actions/setup-python@v4
      - name: Is this the most recent commit? It won't be if the action was reran
        run: |
          git fetch &> /dev/null
          if [[ $(git status -sb | grep behind) ]]; then
            echo "this commit is not the most recent on this branch -- rest of action will be skipped"
            echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          else
            echo "IS_GIT_BEHIND=false" >> $GITHUB_ENV
          fi
      - name: Git config
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: generate docs (README)
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          set -e
          outdir=Docs
          git rm -r $outdir || true
          # generate
          docker run --rm \
              -v $PWD:/local \
              openapitools/openapi-generator-cli generate \
              --skip-validate-spec \
              -i /local/wms/$REST_OPENAPI_SPEC_FPATH \
              -g markdown \
              -o /local/$outdir
          sudo chmod -R +777 $outdir  # needed since the 'rm' above wiped previous ownership & now container owns it all
          # tweak auto-generated contents -- miscellaneous
          # remove "no auth" mentions
          sed -i "/All endpoints do not require authorization./d" $outdir/README.md
          sed -i "\|All URIs are relative to \*http://localhost\*|d" $outdir/README.md
          #       ^^ alternate delimiter: https://stackoverflow.com/a/1797967
          find $outdir -type f -exec sed -i '/No authorization required/d' {} +
          
          cat "$outdir/README.md"
          
          # get mapping -- method (link/header) and request dest
          declare -A mapping  # associative array (like python dict)
          in_table=false
          while IFS= read -r line; do
              # Check if the line contains the table header
              if [[ "$line" == *"| Class | Method | HTTP request |"* ]]; then
                  in_table=true
                  continue
              fi
          
              # Skip lines until we enter the table
              if ! $in_table; then
                  continue
              fi
          
              # Skip the table separator line
              if [[ "$line" == \|--* ]]; then
                  continue
              fi
          
              # Stop processing if a blank line is encountered (end of table)
              [[ -z "$line" ]] && break
          
              # the first entry starts with `|`, the following do not: just lstrip all 
              line=$(echo "$line" | sed 's/^|*//')
          
              # Process the table row and extract the relevant fields
              #    extract the Method and HTTP request fields (second and third columns)
              method_col_attr=$(echo "$line" | awk -F'|' '{gsub(/^[[:space:]]+|[[:space:]]+$/, "", $2); print $2}')
              http_request_col_attr=$(echo "$line" | awk -F'|' '{gsub(/^[[:space:]]+|[[:space:]]+$/, "", $3); print $3}')
              mapping["$method_col_attr"]="$http_request_col_attr"
          done < "$outdir/README.md"
          
          # Now you can access the dictionary and process it as needed
          for method_col_attr in "${!mapping[@]}"; do
              http_request_col_attr="${mapping[$method_col_attr]}"
              echo "$method_col_attr -> $http_request_col_attr"
          
              http_request_header=$(echo "$http_request_col_attr" | tr -d '*')  # remove the markdown bold markers
              http_request_markdown_link=$(echo "$http_request_header" | \
                  sed -e 's/\*\*//g' \
                      -e 's/[{}]//g' \
                      -e 's/[ :]/-/g' \
                      -e 's/-\+/-/g' \
                      -e 's/^-//' \
                      -e 's/-$//' \
                      -e 's/\///g' \
                  | tr '[:upper:]' '[:lower:]')   # Remove **, {}, slashes; replace spaces/colons with hyphens; normalize hyphens; convert to lowercase  
          
              method_header=$(echo "$method_col_attr" | awk -F'[][]' '{print $2}' | sed 's/\*\*//g')
              method_markdown_link=$(echo "$method_col_attr" | awk -F'#' '{print $2}' | sed 's/[)]//')
          
              set -x
              # do link first in case the method header and link are too similar 
              find "$outdir" -type f -exec sed -i "s;#$method_markdown_link;#$http_request_markdown_link;gI" {} +  # case-insensitive replacefind "$outdir" -type f -exec sed -i "s;$method_markdown_link;$http_request_markdown_link;gI" {} +  # case-insensitive replace
              find "$outdir" -type f -exec sed -i "s;$method_header;$http_request_header;gI" {} +  # case-insensitive replace
              find "$outdir" -type f -exec sed -i "s;\(\[\)\*\*$http_request_header\*\*\(\](.*\.md#$http_request_markdown_link)\);\1_details_\2;g" {} +  # case-insensitive replace
              set +x
          done

      - name: git add, commit, push
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          git add . || true
          git commit -m "<ci> modify rest documentation" || true
          git push || true


  ############################################################################
  # TESTS
  #############################################################################


  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}

  integration-test-full-wms-workflow:
    needs: [ py-versions, schema-modifications ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    services:
      mongo:
        image: bitnami/mongodb:4
        ports:
          - 27017:27017
        env:
          MONGODB_REPLICA_SET_MODE: primary
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          # cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}
          load: true
      - run: |
          pip install .[tests]
      - name: test (run servers in background)
        run: |
          python tests/integration/dummy_mqs.py &> ./dummy_mqs.out &
          
          # this needs to be in the same step b/c shell exits when step is done
          docker run --network='host' --rm --name rest \
            --env MONGODB_HOST="${{ env.MONGODB_HOST }}" \
            --env MONGODB_PORT="${{ env.MONGODB_PORT }}" \
            --env REST_HOST="${{ env.REST_HOST }}" \
            --env REST_PORT="${{ env.REST_PORT }}" \
            --env MQS_ADDRESS="${{ env.MQS_ADDRESS }}" \
            --env REST_OPENAPI_SPEC_FPATH="${{ env.REST_OPENAPI_SPEC_FPATH }}" \
            --env DB_JSONSCHEMA_DIR="${{ env.DB_JSONSCHEMA_DIR }}" \
            --env TASKFORCE_LAUNCH_CONTROL_DELAY="${{ env.TASKFORCE_LAUNCH_CONTROL_DELAY }}" \
            --env WORKFLOW_MQ_ACTIVATOR_MQS_RETRY_WAIT="${{ env.WORKFLOW_MQ_ACTIVATOR_MQS_RETRY_WAIT }}" \
            --env WORKFLOW_MQ_ACTIVATOR_DELAY="${{ env.WORKFLOW_MQ_ACTIVATOR_DELAY }}" \
            --env CI="true" \
            ${{ env.CI_DOCKER_IMAGE_W_TAG }} &> ./rest.out &
          
          sleep 10
          export TEST_PILOT_IMAGE_LATEST_TAG=$( python -c 'import requests; print(requests.get("https://api.github.com/repos/Observation-Management-Service/ewms-pilot/releases/latest").json()["tag_name"].lstrip("v"))' )
          pytest -vvv --exitfirst --reverse tests/integration/test_tms_workflow.py
      #
      - if: always()
        run: |
          cat ./dummy_mqs.out
      - if: always()
        run: |
          docker logs rest || cat ./rest.out


  unit-tests:
    needs: [ py-versions, schema-modifications ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          pip install .[tests]
      - name: test
        run: |
          pytest -vvv tests/unit/


  #############################################################################
  # GITHUB RELEASE
  #############################################################################


  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      flake8,
      mypy,
      py-setup,
      py-versions,
      py-dependencies,
      code-format,
      schema-modifications,
      api-documentation,
      test-build-docker,
      integration-test-full-wms-workflow,
      unit-tests
    ]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # repository_username: __token__
          # repository_password: ${{ secrets.PYPI_TOKEN }}
