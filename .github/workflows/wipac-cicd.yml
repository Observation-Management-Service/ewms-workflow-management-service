name: wipac ci/cd


on: [push]


env:
  CI_DOCKER_IMAGE_W_TAG: wms/test:local
  MONGODB_HOST: localhost
  MONGODB_PORT: 27017
  REST_HOST: localhost  # the server should connect to 0.0.0.0
  REST_PORT: 8080
  #
  REST_OPENAPI_PATHS_DIR: "schema/rest/paths"
  REST_OPENAPI_PREBUILD_FPATH: "schema/rest/openapi_prebuild.json"
  REST_OPENAPI_SPEC_FPATH: "schema/rest/openapi_compiled.json"
  DB_JSONSCHEMA_DIR: "schema/db"


jobs:

  #############################################################################
  # PACKAGING & LINTERS
  #############################################################################


  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.1

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.0

  mypy:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0

  py-setup:
    runs-on: ubuntu-latest
    steps:
      # dependabot can't access normal secrets
      #   & don't run non-branch triggers (like tags)
      #   & we don't want to trigger an update on PR's merge to main/master/default (which is a branch)
      # IOW: only for non-dependabot branches
      - if: |
          github.actor != 'dependabot[bot]' &&
          github.ref_type == 'branch' &&
          format('refs/heads/{0}', github.event.repository.default_branch) != github.ref
        name: checkout (only for non-dependabot non-default branches)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: |
          github.actor != 'dependabot[bot]' &&
          github.ref_type == 'branch' &&
          format('refs/heads/{0}', github.event.repository.default_branch) != github.ref
        name: wipac-dev-py-setup-action (only for non-dependabot non-default branches)
        uses: WIPACrepo/wipac-dev-py-setup-action@v3.0
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Management Service"

  py-dependencies:
    runs-on: ubuntu-latest
    steps:
      # dependabot can't access normal secrets
      #   & don't run non-branch triggers (like tags)
      #   & we don't want to trigger an update on PR's merge to main/master/default (which is a branch)
      # IOW: only for non-dependabot branches
      - if: |
          github.actor != 'dependabot[bot]' &&
          github.ref_type == 'branch' &&
          format('refs/heads/{0}', github.event.repository.default_branch) != github.ref
        name: checkout (only for non-dependabot non-default branches)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: |
          github.actor != 'dependabot[bot]' &&
          github.ref_type == 'branch' &&
          format('refs/heads/{0}', github.event.repository.default_branch) != github.ref
        name: wipac-dev-py-setup-action (only for non-dependabot non-default branches)
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v1.0


  ############################################################################
  # AUTO-GENERATION
  #############################################################################


  schema-modifications:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: actions/setup-python@v4
      - name: Is this the most recent commit? It won't be if the action was reran
        run: |
          git fetch &> /dev/null
          if [[ $(git status -sb | grep behind) ]]; then
            echo "this commit is not the most recent on this branch -- rest of action will be skipped"
            echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          else
            echo "IS_GIT_BEHIND=false" >> $GITHUB_ENV
          fi
      - name: Git config
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: modify REST path schemas - ${{ env.REST_OPENAPI_PATHS_DIR }}
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          cd wms/$REST_OPENAPI_PATHS_DIR
          python ${{ github.workspace }}/resources/modify_rest_path_schemas.py

      - name: modify DB schemas - ${{ env.DB_JSONSCHEMA_DIR }}
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          cd wms/$DB_JSONSCHEMA_DIR
          python ${{ github.workspace }}/resources/modify_db_schemas.py

      - name: auto-build ${{ env.REST_OPENAPI_SPEC_FPATH }}
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          # NOTE: DO NOT CHANGE THE CONTENTS OF THE SCHEMA, ONLY ASSEMBLE.
          #
          # ANY MODIFICATIONS SHOULD BE MADE TO **ORIGINAL FILES**
          # (NOT THE AUTO-GENERATED FILE) AND COMMITTED.

          cd wms/$( dirname $REST_OPENAPI_PREBUILD_FPATH )
          python ${{ github.workspace }}/resources/build_openapi_schema.py \
              $( basename $REST_OPENAPI_PREBUILD_FPATH ) \
              $( basename $REST_OPENAPI_SPEC_FPATH )

      - name: generate README
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          # generate first as asciidoc (compiles to one file, their md generator produces a dir)
          cd wms/$( dirname $REST_OPENAPI_SPEC_FPATH )
          TMPDIR=$(mktemp -d -p .)  # temp dir here (covered by .gitignore)
          echo $TMPDIR
          docker run --rm \
              -v $PWD:/local \
              openapitools/openapi-generator-cli generate \
              --skip-validate-spec \
              -i /local/$( basename $REST_OPENAPI_SPEC_FPATH ) \
              -g asciidoc \
              -o /local/$TMPDIR
          cat ./$TMPDIR/index.adoc
          # now transform to md
          npm i --prefix $TMPDIR downdoc
          npx downdoc -o ${{ github.workspace }}/README.md ./$TMPDIR/index.adoc

      - name: git add, commit, push
        if: env.IS_GIT_BEHIND != 'true'
        run: |
          git add . || true
          git commit -m "<ci> modify openapi/jsonschema file(s)" || true
          git push || true


  ############################################################################
  # TESTS
  #############################################################################


  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}

  integration-tests:
    needs: [py-versions, schema-modifications]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    services:
      mongo:
        image: bitnami/mongodb:4
        ports:
        - 27017:27017
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          # cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}
          load: true
      - run: |
          pip install .[tests]
      - name: test (run rest server in background)
        run: |
          # this needs to be in the same step b/c shell exits when step is done
          docker run --network='host' --rm --name rest \
            --env MONGODB_HOST="${{ env.MONGODB_HOST }}" \
            --env MONGODB_PORT="${{ env.MONGODB_PORT }}" \
            --env REST_HOST="${{ env.REST_HOST }}" \
            --env REST_PORT="${{ env.REST_PORT }}" \
            --env REST_OPENAPI_SPEC_FPATH="${{ env.REST_OPENAPI_SPEC_FPATH }}" \
            --env DB_JSONSCHEMA_DIR="${{ env.DB_JSONSCHEMA_DIR }}" \
            --env CI="true" \
            ${{ env.CI_DOCKER_IMAGE_W_TAG }} &> ./rest.out &
          sleep 10

          if [[ $(ping -c 1 "http://${{ env.REST_HOST }}:${{ env.REST_PORT }}") ]]; then
            echo "rest server connected"
          else
            echo "ERROR: cannot reach rest server"
            cat ./rest.out
          fi

          pytest -vvv --exitfirst tests/integration/
      #
      - if: always()
        run: |
          docker logs rest || cat ./rest.out


  unit-tests:
    needs: [py-versions, schema-modifications]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          pip install .[tests]
      - name: test
        run: |
          pytest -vvv tests/unit/


  #############################################################################
  # GITHUB RELEASE
  #############################################################################


  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [flake8, mypy, py-setup, py-versions, schema-modifications, test-build-docker, integration-tests, unit-tests]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@v7.34.6
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        # repository_username: __token__
        # repository_password: ${{ secrets.PYPI_TOKEN }}
