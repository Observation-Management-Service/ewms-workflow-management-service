name: wipac ci/cd

on:
  # only on branch pushes
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # don't cancel on main/master/default
  cancel-in-progress: ${{ format('refs/heads/{0}', github.event.repository.default_branch) != github.ref }}

env:
  CI_DOCKER_IMAGE_W_TAG: wms/test:local
  MONGODB_HOST: localhost
  MONGODB_PORT: 27017
  REST_HOST: localhost  # the server should connect to 0.0.0.0
  REST_PORT: 8080
  MQS_ADDRESS: http://localhost:8081
  #
  REST_OPENAPI_SPEC_FPATH: "schema/rest/openapi_compiled.json"
  DB_JSONSCHEMA_DIR: "schema/db"
  #
  WORKFLOW_MQ_ACTIVATOR_DELAY: 2  # need to define for pytests
  WORKFLOW_MQ_ACTIVATOR_MQS_RETRY_WAIT: 10  # ''
  TASKFORCE_LAUNCH_CONTROL_DELAY: 2  # ''
  CVMFS_PILOT_SINGULARITY_IMAGES_DIR: "./test-cvmfs/"


jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.7


  #############################################################################
  # LINTERS
  #############################################################################

  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v6
        with:
          python-version:
            ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.3
        with:
          max-complexity: 11  # ideal is ~10-15

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  #############################################################################
  # PACKAGING
  #############################################################################

  py-setup:
    if: ${{ github.actor != 'dependabot[bot]' }} # dependabot cannot access PAT
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-py-setup-action@v5.5
        with:
          mode: PACKAGING
          python_min: 3.12
          keywords_comma: "EWMS, task, Workflow Management Service, WIPAC, IceCube, Observation Management Service"
          auto_mypy_option: True

  py-dependencies:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: wms:py-dep-this
          load: true
      - uses: WIPACrepo/wipac-dev-py-dependencies-action@v3.2


  #############################################################################
  # FORMATTER
  #############################################################################

  code-format:
    runs-on: ubuntu-latest
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - if: github.actor != 'dependabot[bot]'
        name: "git config user.name github-actions"
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # check git status
          git fetch
          if [[ $(git status -sb | grep behind) ]]; then
            echo "this commit is not the most recent on this branch -- rest of action will be skipped"
            exit 0
          fi
          
          # use literal collection syntax, see https://docs.astral.sh/ruff/rules/unnecessary-collection-call/
          pip install ruff
          ruff check --select C408 --fix . --unsafe-fixes
          
          # push
          git add . || true
          git commit -m "<bot> auto code format file(s)" || true
          git push || true


  ############################################################################
  # AUTO-GENERATION
  #############################################################################

  schema-modifications:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-json-schema-action@v2.0
        with:
          rest_openapi_paths_dir: "schema-precompiled/paths"
          rest_openapi_base_fpath: "schema-precompiled/openapi_prebuild.json"
          rest_openapi_dest_fpath: "wms/${{ env.REST_OPENAPI_SPEC_FPATH }}"
          db_jsonschema_dir: "wms/${{ env.DB_JSONSCHEMA_DIR }}"
          version: 1

  api-documentation:
    needs: [ schema-modifications ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-openapi-docs-action@v1.0
        with:
          openapi_fpath: "wms/${{ env.REST_OPENAPI_SPEC_FPATH }}"


  ############################################################################
  # TESTS
  #############################################################################

  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}

  integration-test-full-wms-workflow:
    needs: [ py-versions, schema-modifications ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    services:
      mongo:
        image: bitnamilegacy/mongodb:4
        ports:
          - 27017:27017
        env:
          MONGODB_REPLICA_SET_MODE: primary
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.py3 }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          file: Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_W_TAG }}
          load: true

      - name: setup mock CVMFS directory
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          mkdir -p "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"
          # seed some baseline tags
          touch "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"/ewms-pilot:0.1.0
          touch "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"/ewms-pilot:0.2.0
          ls -l "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"

      - name: "pip install .[tests]"
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          pip install .[tests]

      - name: test (run servers in background)
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          python tests/integration/dummy_mqs.py &> ./dummy_mqs.out &

          # compute latest pilot tag and mirror it into mock CVMFS
          TEST_PILOT_IMAGE_LATEST_TAG=$( python -c 'import requests; print(requests.get("https://api.github.com/repos/Observation-Management-Service/ewms-pilot/releases/latest").json()["tag_name"].lstrip("v"))' )
          export TEST_PILOT_IMAGE_LATEST_TAG
          echo "latest pilot tag: ${TEST_PILOT_IMAGE_LATEST_TAG}"
          touch "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"/ewms-pilot:"${TEST_PILOT_IMAGE_LATEST_TAG}"

          # start REST in container with CVMFS dir wired in
          docker run --network='host' --rm --name rest \
            --env MONGODB_HOST="${{ env.MONGODB_HOST }}" \
            --env MONGODB_PORT="${{ env.MONGODB_PORT }}" \
            --env REST_HOST="${{ env.REST_HOST }}" \
            --env REST_PORT="${{ env.REST_PORT }}" \
            --env MQS_ADDRESS="${{ env.MQS_ADDRESS }}" \
            --env REST_OPENAPI_SPEC_FPATH="${{ env.REST_OPENAPI_SPEC_FPATH }}" \
            --env DB_JSONSCHEMA_DIR="${{ env.DB_JSONSCHEMA_DIR }}" \
            --env TASKFORCE_LAUNCH_CONTROL_DELAY="${{ env.TASKFORCE_LAUNCH_CONTROL_DELAY }}" \
            --env WORKFLOW_MQ_ACTIVATOR_MQS_RETRY_WAIT="${{ env.WORKFLOW_MQ_ACTIVATOR_MQS_RETRY_WAIT }}" \
            --env WORKFLOW_MQ_ACTIVATOR_DELAY="${{ env.WORKFLOW_MQ_ACTIVATOR_DELAY }}" \
            --env CVMFS_PILOT_SINGULARITY_IMAGES_DIR="$( realpath "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR" )" \
            --env CI="true" \
            --mount type=bind,source="$( realpath "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR" )",target="$( realpath "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR" )",readonly \
            ${{ env.CI_DOCKER_IMAGE_W_TAG }} &> ./rest.out &

          sleep 10
          # pytest picks up TEST_PILOT_IMAGE_LATEST_TAG from env if needed
          pytest -vvv --exitfirst --reverse tests/integration/test_tms_workflow.py
      #
      - if: always()
        name: "cat ./dummy_mqs.out"
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          cat ./dummy_mqs.out
      - if: always()
        name: "docker logs rest || cat ./rest.out"
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          docker logs rest || cat ./rest.out


  unit-tests:
    needs: [ py-versions, schema-modifications ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.py3 }}
      - name: setup mock CVMFS directory
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          mkdir -p "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"
          # seed a few tags so resolve_tag() has options
          touch "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"/ewms-pilot:0.1.0
          touch "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"/ewms-pilot:0.2.0
          ls -l "$CVMFS_PILOT_SINGULARITY_IMAGES_DIR"
      - name: "pip install .[tests]"
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          pip install .[tests]
      - name: test
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          pytest -vvv tests/unit/


  #############################################################################
  # GIT TAG & GITHUB RELEASE
  #############################################################################

  tag-and-release:
    # only run on main/default branch
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      py-versions,
      flake8,
      mypy,
      py-setup,
      py-dependencies,
      code-format,
      schema-modifications,
      api-documentation,
      test-build-docker,
      integration-test-full-wms-workflow,
      unit-tests
    ]
    uses: WIPACrepo/wipac-dev-workflows/.github/workflows/tag-and-release.yml@v1.14
    permissions: # for GITHUB_TOKEN
      contents: write
    with:
      project-type: python
      python-version: "${{ fromJSON(needs.py-versions.outputs.matrix)[0] }}"
      release-artifacts: |
        py-dependencies-logs
    secrets:
      TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # trigger tag-event gha workflows
